{"version":3,"sources":["components/Navigation.js","components/Footer.js","screens/BaseScreen.js","screens/HomepageScreen.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","useState","isOpen","setIsOpen","Wrapper","Navbar","color","light","expand","Container","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","styled","div","Footer","BaseScreen","children","HomepageScreen","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iXA2CeA,EAvCI,SAACC,GAAW,IAAD,EACEC,oBAAS,GADX,mBACnBC,EADmB,KACXC,EADW,KAK1B,OACI,kBAACC,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MAC/B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,oBACA,kBAACC,EAAA,EAAD,CAAeC,QAPhB,kBAAMV,GAAWD,MAQhB,kBAACY,EAAA,EAAD,CAAUZ,OAAQA,EAAQa,QAAM,GAC5B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC3B,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,gBAAd,eAEJ,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,4CAAd,WAEJ,kBAACS,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAC9B,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,WAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACf,kBAACC,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,CAAcC,SAAO,IACrB,kBAACD,EAAA,EAAD,iBAIZ,kBAACE,EAAA,EAAD,yBASlBzB,EAAU0B,IAAOC,IAAV,sEAAGD,CAAH,MC9BEE,EAVA,WACX,OACI,kBAAC,EAAD,KACI,kBAACvB,EAAA,EAAD,KACI,uBAAGQ,UAAU,eAAb,kCAOVb,EAAU0B,IAAOC,IAAV,sEAAGD,CAAH,MCMEG,EAdI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,yBAAKjB,UAAU,gBACX,kBAACR,EAAA,EAAD,KACKyB,IAGT,kBAAC,EAAD,QAMN9B,EAAU0B,IAAOC,IAAV,sEAAGD,CAAH,MCTEK,EARQ,WACnB,OACI,kBAAC,EAAD,KACI,qDAMIL,IAAOC,IAAV,0EAAGD,CAAH,MCAEM,MAVf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWJ,OCIrBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6e35120.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components/macro'\nimport { Container, Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, NavbarText } from 'reactstrap';\n\nconst Navigation = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <Wrapper>\n            <Navbar color=\"light\" light expand=\"md\">\n                <Container>\n                    <NavbarBrand href=\"/\">Rick & morty API</NavbarBrand>\n                    <NavbarToggler onClick={toggle} />\n                    <Collapse isOpen={isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"/components/\">Components</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n                            </NavItem>\n                            <UncontrolledDropdown nav inNavbar>\n                                <DropdownToggle nav caret>\n                                    Options\n                            </DropdownToggle>\n                                <DropdownMenu right>\n                                    <DropdownItem>Option 1</DropdownItem>\n                                    <DropdownItem>Option 2</DropdownItem>\n                                    <DropdownItem divider />\n                                    <DropdownItem>Reset</DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledDropdown>\n                        </Nav>\n                        <NavbarText>Simple Text</NavbarText>\n                    </Collapse>\n                </Container>\n            </Navbar>\n        </Wrapper>\n    );\n}\n\nexport default Navigation;\nconst Wrapper = styled.div``\n","import React, { useState } from 'react';\nimport styled from 'styled-components/macro'\nimport { Container, Row, Col } from 'reactstrap';\n\nconst Footer = () => {\n    return (\n        <Wrapper>\n            <Container>\n                <p className='text-center'>Exercice-7 @ copyright.2020</p>\n            </Container>\n        </Wrapper>\n    );\n}\n\nexport default Footer;\nconst Wrapper = styled.div``\n","import React from 'react';\nimport styled from 'styled-components/macro'\nimport { Container } from 'reactstrap';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\n\n\nconst BaseScreen = ({ children }) => {\n    return (\n        <Wrapper>\n            <Navigation />\n            <div className=\"page-wrapper\">\n                <Container>\n                    {children}\n                </Container>\n            </div>\n            <Footer />\n        </Wrapper>\n    );\n}\n\nexport default BaseScreen;\nconst Wrapper = styled.div``","import React, { useState } from 'react';\nimport styled from 'styled-components/macro'\nimport { Container, Row, Col } from 'reactstrap';\nimport BaseScreen from './BaseScreen';\n\nconst HomepageScreen = () => {\n    return (\n        <BaseScreen>\n            <h2>This is my homepage</h2>\n        </BaseScreen>\n    );\n}\n\nexport default HomepageScreen;\nconst Wrapper = styled.div``","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport HomepageScreen from './screens/HomepageScreen'\n\nfunction App() {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/\" exact component={HomepageScreen} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './global.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}