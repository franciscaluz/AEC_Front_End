{"version":3,"sources":["assets/images/rickandmorty-homepage.png","assets/images/homepage-blob.svg","assets/images/character-bg.svg","assets/images/default-empty.jpeg","assets/images/character-single-bg.svg","assets/images/morty-snout.png","assets/images/pickle-rick.gif","components/Navigation.js","components/Footer.js","screens/BaseScreen.js","screens/HomepageScreen.js","screens/PageNotFound.js","components/modals/CharacterAddModal.js","screens/CharacterScreen.js","components/modals/CharacterEditModal.js","components/modals/CharacterDeleteModal.js","screens/CharacterSingleScreen.js","screens/UserTableScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","Wrapper","Navbar","expand","className","NavbarBrand","href","Nav","navbar","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","to","DropdownItem","disabled","NavItem","styled","div","Footer","Container","BaseScreen","children","HomepageScreen","Row","Col","md","src","HomeImg","alt","imgBg","PageNotFound","history","useHistory","require","Button","onClick","goBack","withRouter","props","getCharacter","useState","modal","setModal","setState","toggle","closeBtn","photos","setPhotos","nom","statut","genre","espece","type","origine","emplacement","photo","id","a","fetch","method","headers","body","JSON","stringify","name","status","gender","species","origin","location","image","response","console","log","ok","push","toast","success","Error","color","Modal","isOpen","size","ModalWrapper","onValidSubmit","event","values","preventDefault","addCharacter","document","getElementById","value","onInvalidSubmit","errors","nom_personnage","error","ModalHeader","close","ModalBody","form","style","backgroundImage","Default","FormGroup","Label","for","Input","placeholder","onBlur","FormText","required","FormFeedback","ModalFooter","donneesRecues","setDonneesRecues","json","reponseDeApi","statusText","useEffect","map","key","Card","CardBody","CardTitle","CardSubtitle","cardBg","getCharacterInfos","characterId","useParams","type_espece","Form","defaultValue","editCharacter","deleteImg","isLoading","setIsLoading","singleCharacterBg","UserTableScreen","data","setData","res","getData","results","result","App","autoClose","hideProgressBar","path","exact","component","CharacterScreen","Boolean","window","hostname","match","ReactDOM","render","Fragment","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2a01b465.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rickandmorty-homepage.538304cb.png\";","module.exports = __webpack_public_path__ + \"static/media/homepage-blob.af16f80a.svg\";","module.exports = __webpack_public_path__ + \"static/media/character-bg.9c317859.svg\";","module.exports = __webpack_public_path__ + \"static/media/default-empty.6ae27f26.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/character-single-bg.0c85682b.svg\";","module.exports = __webpack_public_path__ + \"static/media/morty-snout.6dfd0238.png\";","module.exports = __webpack_public_path__ + \"static/media/pickle-rick.fb50a355.gif\";","import React from 'react';\nimport styled from 'styled-components/macro'\nimport { Link } from 'react-router-dom'\nimport { Navbar, NavbarBrand, Nav, NavItem, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nconst Navigation = () => {\n    return (\n        <Wrapper>\n            <Navbar expand=\"xs\" className=\"px-0\">\n                <NavbarBrand href=\"/\">\n                    Wik<span> & </span>Morty\n                </NavbarBrand>\n                <Nav className=\"navbar-center\" navbar>\n                    <UncontrolledDropdown nav inNavbar>\n                        <DropdownToggle nav caret>\n                            Menu\n                            </DropdownToggle>\n                        <DropdownMenu right>\n                            <Link to=\"/character\" className=\"dropdown-item\">\n                                Personnages\n                                </Link>\n                            <DropdownItem disabled>Planètes</DropdownItem>\n                            <DropdownItem disabled>Episodes</DropdownItem>\n                        </DropdownMenu>\n                    </UncontrolledDropdown>\n\n                </Nav>\n                <Nav className=\"navbar-right\" navbar>\n                    <NavItem>\n                        <Link to=\"#\" className=\"btn btn-theme-white\">Connexion</Link>\n                    </NavItem>\n                    <NavItem>\n                        <Link to=\"#\" className=\"btn btn-theme-secondary-alt\">S'enregistrer</Link>\n                    </NavItem>\n                </Nav>\n            </Navbar>\n        </Wrapper>\n    );\n}\n\nexport default Navigation;\nconst Wrapper = styled.div`\n.navbar-brand {\n    font-size: 22px;\n    text-transform: uppercase;\n    color: #312651;\n    flex: 0 1 30%;\n    font-weight: 300;\n\n    span {\n        color: #8BD4F5;\n    }\n}\n\n.navbar-center {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex: 0 1 40%;\n}\n\n.navbar-right {\n    display: flex;\n    justify-content: end;\n    flex: 0 1 30%;\n\n    .btn {\n        pointer-events: none;\n    }\n}\n\n.nav-link {\n    font-weight: 500;\n    color: #312651 !important;\n    &:hover {\n        background: \n    }\n}\n`\n","import React from 'react';\nimport styled from 'styled-components/macro'\nimport { Container } from 'reactstrap';\n\nconst Footer = () => {\n    return (\n        <Wrapper>\n            <Container>\n                <p>Projet Final - Francisca Vargas @ copyright.2020</p>\n            </Container>\n        </Wrapper>\n    );\n}\n\nexport default Footer;\nconst Wrapper = styled.div``\n","import React from 'react';\nimport styled from 'styled-components/macro'\nimport { Container } from 'reactstrap';\nimport Navigation from '../components/Navigation';\nimport Footer from '../components/Footer';\n\n\nconst BaseScreen = ({ children }) => {\n    return (\n        <Wrapper>\n            <Container>\n                <Navigation />\n            </Container>\n            <div className=\"page-wrapper\">\n                <Container>\n                    {children}\n                </Container>\n            </div>\n            <Footer />\n        </Wrapper>\n    );\n}\n\nexport default BaseScreen;\nconst Wrapper = styled.div``","import React from 'react';\nimport styled from 'styled-components/macro'\nimport BaseScreen from './BaseScreen';\nimport { Link } from 'react-router-dom';\nimport { Row, Col } from 'reactstrap';\nimport HomeImg from '../assets/images/rickandmorty-homepage.png'\nimport imgBg from '../assets/images/homepage-blob.svg'\n\nconst HomepageScreen = () => {\n    return (\n        <BaseScreen>\n            <Wrapper>\n                <Row className=\"align-content-stretch\">\n                    <Col md={6}>\n                        <div className=\"homepage-text-wrapper\">\n                            <div>\n                                <h1 className=\"display-4\">Le grand Wiki de la série Rick & Morty</h1>\n                                <p>Retrouvez toute la documentation de la série partagée gratuitement par nos utilisateurs et contribuez vous-même à l'enrichir en publiant ou modifiant de nouvelles informations!</p>\n                                <div className=\"button-container\">\n                                    <Link to=\"/character\" className=\"btn btn-theme-primary-alt\">Voir les informations</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col md={6}>\n                        <div className=\"homepage-img-wrapper\">\n                            <img src={HomeImg} alt=\"\" className=\"img-fluid\" />\n                        </div>\n                    </Col>\n                </Row>\n            </Wrapper>\n        </BaseScreen>\n    );\n}\n\nexport default HomepageScreen;\n\nconst Wrapper = styled.div`\n.homepage-text-wrapper {\n    display: flex;\n    align-items: center;\n    height: 100%;\n\n    p {\n        font-size: 16px;\n        margin-bottom: 30px;\n    }\n}\n\n.homepage-img-wrapper {\n    height: 100%;\n    background-image: url(${imgBg});\n    background-repeat: no-repeat;\n    background-size: contain;\n}\n\n.button-container {\n    .btn:first-of-type {\n        margin-right: 15px;\n    }\n}\n\n`","import React from 'react';\nimport styled from 'styled-components/macro';\nimport BaseScreen from './BaseScreen';\nimport { Row, Col, Button } from 'reactstrap';\nimport { useHistory } from 'react-router-dom'\nimport { FiArrowLeft } from \"react-icons/fi\";\n\nconst PageNotFound = () => {\n    const history = useHistory();\n    return (\n        <BaseScreen>\n            <Wrapper>\n                <Row>\n                    <Col md={6}>\n                        <img src={require('../assets/images/pickle-rick.gif')} alt=\"pickle rick...\" className=\"img-fluid\" />\n                    </Col>\n                    <Col md={6}>\n                        <h1 className=\"display-1 mb-0\"><span className=\"underline--magical\">404</span></h1>\n                        <h2 className=\"mb-5\">Oh ben! On dirait que cette page n'existe pas...</h2>\n                        <Button onClick={() => history.goBack()} className=\"btn btn-theme-primary-alt\"><FiArrowLeft /> Retour</Button>\n                    </Col>\n                </Row>\n            </Wrapper>\n        </BaseScreen>\n    );\n}\n\nexport default PageNotFound;\nconst Wrapper = styled.div`\n\n.display-1 {\n    font-size: 10rem;\n}\n\n`","import React, { useState } from \"react\";\nimport { withRouter, useHistory } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { Row, Col, Button, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup, Label, Input, FormFeedback, FormText } from 'reactstrap';\nimport { FiPlus, FiX } from 'react-icons/fi'\n//import { API } from \"../../constantes\";\nimport { toast } from \"react-toastify\"\nimport Default from \"../../assets/images/default-empty.jpeg\"\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\n\nconst CharacterAddModal = (props) => {\n    const { getCharacter } = props;\n    const [modal, setModal] = useState(false);\n    const [state, setState] = useState({})\n    const toggle = () => setModal(!modal);\n    const closeBtn = <button className=\"close\" onClick={toggle}><FiX /></button>;\n    const [photos, setPhotos] = useState(\"\");\n    let history = useHistory();\n\n    async function addCharacter(nom, statut, genre, espece, type, origine, emplacement, photo, id) {\n        try {\n            let url = 'http://localhost:3001/characters/'\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    id: id,\n                    name: nom,\n                    status: statut,\n                    gender: genre,\n                    species: espece,\n                    type: type,\n                    origin: origine,\n                    location: emplacement,\n                    image: photo,\n                })\n            });\n\n            console.log({ response })\n            if (response.ok) {\n                history.push(\"/character\");\n                toast.success(\"Ajout du personnage \" + nom);\n                console.log(\"response\", response)\n                getCharacter();\n                return response;\n            }\n            throw new Error('Request failed!');\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    function handlePhoto(event) {\n        const photos = document.getElementById('photo_personnage').value;\n        setPhotos(photos);\n    }\n\n    function handleValidSubmit(event, values) {\n        event.preventDefault();\n        const nom = document.getElementById('nom_personnage').value;\n        const statut = document.getElementById('statut_personnage').value;\n        const genre = document.getElementById('genre_personnage').value;\n        const espece = document.getElementById('espece_personnage').value;\n        const type = document.getElementById('type_personnage').value;\n        const origine = document.getElementById('origine_personnage').value;\n        const emplacement = document.getElementById('emplacement_personnage').value;\n        const photo = document.getElementById('photo_personnage').value;\n\n        addCharacter(nom, statut, genre, espece, type, origine, emplacement, photo);\n        toggle();\n    }\n\n    function handleInvalidSubmit(event, errors, values) {\n        setState({\n            nom_personnage: values.nom_personnage,\n            error: true\n        });\n    }\n\n\n    return (\n        <div className=\"modal-add-wrapper\">\n            <Button color=\"cta-primary\" onClick={toggle}>\n                <span className=\"btn-icon-wrap\"><FiPlus /></span>\n                Ajouter\n            </Button>\n            <Modal isOpen={modal} toggle={toggle} className=\"custom-modal-form\" size=\"lg\">\n                <ModalWrapper>\n                    <AvForm onValidSubmit={handleValidSubmit} onInvalidSubmit={handleInvalidSubmit}>\n                        <ModalHeader toggle={toggle} close={closeBtn}>Ajouter un personnage</ModalHeader>\n                        <ModalBody>\n                            <Row form>\n                                <Col md={12}>\n                                    <div className=\"modal-form-photo-wrapper\">\n                                        <div className=\"modal-character-image-wrapper\">\n                                            <div className=\"image-ratio-1\">\n                                                {photos ?\n                                                    <div className=\"img-wrapper\" style={{ backgroundImage: `url(${photos})` }}></div>\n                                                    : <div className=\"img-wrapper\" style={{ backgroundImage: `url(${Default})` }}></div>\n                                                }\n                                            </div>\n                                        </div>\n                                        <FormGroup className=\"w-100\">\n                                            <Label for=\"photo_personnage\">Photo</Label>\n                                            <Input type=\"url\" id=\"photo_personnage\" name=\"photo_personnage\" placeholder=\"Entrez un URL valide\" onBlur={handlePhoto} />\n                                            <FormText>Ex: https://rickandmortyapi.com/api/character/avatar/199.jpeg</FormText>\n                                        </FormGroup>\n                                    </div>\n                                </Col>\n                                <Col md={12}>\n                                    <FormGroup>\n                                        <Label for=\"nom_personnage\">Nom complet<span className=\"form-required\">*</span></Label>\n                                        <AvField type=\"text\" name=\"nom_personnage\" id=\"nom_personnage\" placeholder=\"Entrez le prénom et le nom\" required />\n                                        <FormFeedback>Ce champ est requis</FormFeedback>\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"genre_personnage\">Genre</Label>\n                                        <Input type=\"text\" name=\"genre_personnage\" id=\"genre_personnage\" placeholder=\"Entrez le genre\" />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"statut_personnage\">Statut</Label>\n                                        <Input type=\"text\" name=\"statut_personnage\" id=\"statut_personnage\" placeholder=\"Entrez le statut\" />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"espece_personnage\">Espèce</Label>\n                                        <Input type=\"text\" name=\"espece_personnage\" id=\"espece_personnage\" placeholder=\"Entrez l'espèce\" />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"type_personnage\">Type d'espèce</Label>\n                                        <Input type=\"text\" name=\"type_personnage\" id=\"type_personnage\" placeholder=\"Entrez le type d'espèce\" />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"origine_personnage\">Planète d'origine</Label>\n                                        <Input type=\"text\" name=\"origine_personnage\" id=\"origine_personnage\" placeholder=\"Nom de la planète d'origine\" />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup>\n                                        <Label for=\"emplacement_personnage\">Emplacement Actuel</Label>\n                                        <Input type=\"text\" name=\"emplacement_personnage\" id=\"emplacement_personnage\" placeholder=\"Entrez l'emplacement actuel\" />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"theme-secondary\" onClick={toggle}>Annuler</Button>\n                            <Button color=\"theme-primary\" type=\"submit\">Ajouter</Button>\n                        </ModalFooter>\n                    </AvForm>\n                </ModalWrapper>\n            </Modal>\n        </div>\n    );\n}\n\nexport default withRouter(CharacterAddModal);\n\nconst ModalWrapper = styled.div``","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components/macro'\nimport BaseScreen from './BaseScreen'\nimport { withRouter, Link } from 'react-router-dom';\nimport { Card, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\n//import { API } from \"../constantes\";\nimport cardBg from '../assets/images/character-bg.svg'\nimport CharacterAddModal from '../components/modals/CharacterAddModal';\n\nconst CharacterScreen = () => {\n    const [donneesRecues, setDonneesRecues] = useState([]);\n\n    useEffect(() => {\n        getCharacter();\n    }, []);\n\n    async function getCharacter() {\n        try {\n            const response = await fetch(\"http://localhost:3001/characters\");\n            const reponseDeApi = await response.json();\n            setDonneesRecues(reponseDeApi);\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    return (\n        <BaseScreen>\n            <Wrapper>\n                <div className=\"page-header\">\n                    <h1 className=\"page-title page-title-alt\">Personnages</h1>\n                    <CharacterAddModal getCharacter={getCharacter} />\n                </div>\n                <div className=\"row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-xl-3 character-row\">\n                    {donneesRecues.map(donneesRecues => {\n                        const { id, name, image, status, origin } = donneesRecues;\n                        return (\n                            <div key={id} className=\"col character-col\">\n                                <Link to={'/character/' + id}>\n                                    <Card>\n                                        <div className=\"card-inner\">\n                                            <div className=\"card-background\">\n                                                <div className=\"card-image-wrapper\">\n                                                    <div className=\"image-ratio-1\">\n                                                        <div className=\"img-wrapper\" style={{ backgroundImage: `url(${image})` }}></div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"card-character-id\">\n                                                    <h4>{id}</h4>\n                                                </div>\n                                            </div>\n                                            <CardBody>\n                                                <CardTitle>\n                                                    <h3 className=\"mb-0\">{name}</h3>\n                                                </CardTitle>\n                                                <CardSubtitle>\n                                                    <span className=\"character-page-field-title\">Statut:</span> {status} <br />\n                                                    <span className=\"character-page-field-title\">Origine:</span> {origin}\n                                                </CardSubtitle>\n                                            </CardBody>\n                                        </div>\n                                    </Card>\n                                </Link>\n                            </div>\n                        )\n                    })}\n                </div>\n            </Wrapper>\n        </BaseScreen >\n    );\n}\n\nexport default withRouter(CharacterScreen);\nconst Wrapper = styled.div`\n.character-row {\n    align-content: stretch;\n}\n\n.character-col {\n    margin-bottom: 30px;\n\n    a {\n        position: relative;\n        display: block;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        color: #9a9a9a;\n        border-radius: 10px;\n        box-shadow: 4px 4px 10px 0px rgba(0,0,0,0.2);\n        transform: scale(1);\n        transition: all .3s ease;\n\n        &:hover {\n            text-decoration: none;\n            transform: scale(1.05);\n            box-shadow: 10px 10px 10px 0px rgba(0,0,0,0.2);\n        }\n    }\n}\n\n.card {\n    display: flex;\n    flex-direction: column;\n    word-wrap: break-word;\n    background-image: url(${cardBg});\n    background-repeat: no-repeat;\n    background-size: 100%;\n    border: none;\n}\n\n.card-background {\n    position: relative;\n    width: 100%;\n    height: 91px;\n}\n\n.card-character-id {\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    height: 50px;\n    width: 29px;\n    min-width: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #604CA5;\n    border-radius: 10px;\n\n    h4 {\n        margin-bottom: 0;\n        color: #fff;\n    }\n}\n\n.card-image-wrapper {\n    position: absolute;\n    top: 20px;\n    left: 20px;\n    width: 100px;\n    z-index: 3;\n\n    .image-ratio-1 {\n        border-radius: 100%;\n        border: 5px solid #ffffff;\n    }\n}\n\n.card-body {\n    display: flex;\n    flex-direction: column;\n    padding: 50px 1.25rem 1.25rem;\n}\n\n.card-subtitle {\n    margin-bottom: 20px;\n    flex-grow: 1;\n}\n\n.button-container {\n    .btn:first-of-type {\n        margin-right: 10px;\n    }\n}\n\n@media(max-width: 767.98px) {\n    .page-header {\n        flex: direction: column;\n    }\n}\n\n`","import React, { useState } from \"react\";\nimport { useParams, withRouter } from 'react-router-dom'\nimport { Row, Col, Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { FiEdit, FiX } from 'react-icons/fi';\n//import Default from \"../../assets/images/default-empty.jpeg\"\n//import { API } from \"../../constantes\";\nimport { toast } from \"react-toastify\"\n\nconst CharacterEditModal = (props) => {\n    const { donneesRecues, getCharacterInfos } = props;\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const closeBtn = <button className=\"close\" onClick={toggle}><FiX /></button>;\n    const characterId = useParams().id;\n    const [photos, setPhotos] = useState(\"\");\n\n    async function editCharacter(nom, statut, genre, espece, type_espece, origine, emplacement, photo, id) {\n        try {\n            let url = 'http://localhost:3001/characters/'\n            const response = await fetch(url + characterId, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    id: id,\n                    name: nom,\n                    status: statut,\n                    gender: genre,\n                    species: espece,\n                    type: type_espece,\n                    origin: origine,\n                    location: emplacement,\n                    image: photo,\n                })\n            });\n            if (response.ok) {\n                props.history.push(`/character/${characterId}`);\n                toast.success(\"Modification du personnage \" + nom);\n                getCharacterInfos()\n                return response;\n            }\n            throw new Error('Request failed!');\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    function handleEdit(event) {\n        event.preventDefault();\n\n        const nom = document.getElementById('nom_personnage').value;\n        const statut = document.getElementById('statut_personnage').value;\n        const genre = document.getElementById('genre_personnage').value;\n        const espece = document.getElementById('espece_personnage').value;\n        const type_espece = document.getElementById('type_personnage').value;\n        const origine = document.getElementById('origine_personnage').value;\n        const emplacement = document.getElementById('emplacement_personnage').value;\n        const photo = document.getElementById('photo_personnage').value;\n\n        editCharacter(nom, statut, genre, espece, type_espece, origine, emplacement, photo);\n        toggle()\n    }\n\n    function handlePhoto(event) {\n        const photos = document.getElementById('photo_personnage').value;\n        setPhotos(photos);\n    }\n\n    return (\n        <>\n            <Button color=\"cta-primary\" onClick={toggle}>\n                <span className=\"btn-icon-wrap\"><FiEdit /></span>\n                Modifier\n            </Button>\n            <Modal isOpen={modal} toggle={toggle} className=\"custom-modal-form\" size=\"lg\">\n                <Form>\n                    <ModalHeader toggle={toggle} close={closeBtn}>Modifier le personnage</ModalHeader>\n                    <ModalBody>\n                        <Row form>\n                            <Col md={12}>\n                                <div className=\"modal-form-photo-wrapper\">\n                                    <div className=\"modal-character-image-wrapper\">\n                                        <div className=\"image-ratio-1\">\n                                            {photos ?\n                                                <div className=\"img-wrapper\" style={{ backgroundImage: `url(${photos})` }}></div>\n                                                : donneesRecues.image !== \"\" && <div className=\"img-wrapper\" style={{ backgroundImage: `url(${donneesRecues.image})` }}></div>\n                                            }\n                                        </div>\n                                    </div>\n                                    {/*                                     {photos ? <img src={photos} alt=\"\" className=\"img-fluid\" /> : donneesRecues.image !== \"\" && <img src={donneesRecues.image} alt=\"\" className=\"img-fluid\" />} */}\n\n                                    <FormGroup className=\"w-100\">\n                                        <Label for=\"photo_personnage\">Photo</Label>\n                                        <Input type=\"url\" id=\"photo_personnage\" name=\"photo_personnage\" defaultValue={donneesRecues.image} onBlur={handlePhoto} placeholder=\"Entrez une URL valide\" />\n                                    </FormGroup>\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <FormGroup>\n                                    <Label for=\"nom_personnage\">Nom complet</Label>\n                                    <Input type=\"text\" name=\"nom_personnage\" id=\"nom_personnage\" defaultValue={donneesRecues.name} placeholder=\"Entrez le prénom et le nom\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                                <FormGroup>\n                                    <Label for=\"genre_personnage\">Genre</Label>\n                                    <Input type=\"text\" name=\"genre_personnage\" id=\"genre_personnage\" defaultValue={donneesRecues.gender} placeholder=\"Entrez le genre\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                                <FormGroup>\n                                    <Label for=\"statut_personnage\">Statut</Label>\n                                    <Input type=\"text\" name=\"statut_personnage\" id=\"statut_personnage\" defaultValue={donneesRecues.status} placeholder=\"Entrez le statut\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                                <FormGroup>\n                                    <Label for=\"espece_personnage\">Espèce</Label>\n                                    <Input type=\"text\" name=\"espece_personnage\" id=\"espece_personnage\" defaultValue={donneesRecues.species} placeholder=\"Entrez l'espèce\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                                <FormGroup>\n                                    <Label for=\"type_personnage\">Type d'espèce</Label>\n                                    <Input type=\"text\" name=\"type_personnage\" id=\"type_personnage\" defaultValue={donneesRecues.type} placeholder=\"Entrez le type d'espèce\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                                <FormGroup>\n                                    <Label for=\"origine_personnage\">Planète d'origine</Label>\n                                    <Input type=\"text\" name=\"origine_personnage\" id=\"origine_personnage\" defaultValue={donneesRecues.origin} placeholder=\"Nom de la planète d'origine\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                                <FormGroup>\n                                    <Label for=\"emplacement_personnage\">Emplacement Actuel</Label>\n                                    <Input type=\"text\" name=\"emplacement_personnage\" id=\"emplacement_personnage\" defaultValue={donneesRecues.location} placeholder=\"Entrez l'emplacement actuel\" />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"theme-secondary\" onClick={toggle}>Annuler</Button>\n                        <Button color=\"theme-primary\" type=\"submit\" onClick={handleEdit}>Modifier</Button>\n                    </ModalFooter>\n                </Form>\n            </Modal>\n        </>\n    );\n}\n\nexport default withRouter(CharacterEditModal);","import React, { useState } from \"react\";\nimport { useParams, withRouter } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { FiTrash2, FiX } from 'react-icons/fi'\nimport deleteImg from '../../assets/images/morty-snout.png'\n//import { API } from \"../../constantes\";\nimport { toast } from \"react-toastify\"\n\nconst CharacterDeleteModal = (props) => {\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const closeBtn = <button className=\"close\" onClick={toggle}><FiX /></button>;\n    const characterId = useParams().id;\n\n    async function removeCharacter() {\n        try {\n            let url = 'http://localhost:3001/characters/'\n            const response = await fetch(url + characterId, {\n                method: 'delete',\n            });\n            if (response.ok) {\n                props.history.push(`/character`);\n                toggle()\n                toast.error(\"Suppression du personnage \");\n                return response;\n            }\n            throw new Error('Request failed!');\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    return (\n        <div className=\"modal-delete-wrapper\">\n            <Button color=\"cta-secondary\" onClick={toggle}>\n                <span className=\"btn-icon-wrap\"><FiTrash2 /></span>\n                Supprimer\n            </Button>\n            <Modal isOpen={modal} toggle={toggle} className=\"custom-modal-form\">\n                <ModalWrapper>\n                    <ModalHeader toggle={toggle} close={closeBtn}></ModalHeader>\n                    <ModalBody>\n                        <div className=\"modal-delete-content\">\n                            <img src={deleteImg} alt=\"delete\" className=\"img-fluid\" />\n                            <h3 className=\"mb-0\">Êtes-vous sûr de vouloir supprimer ce personnage?</h3>\n                        </div>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"theme-secondary\" onClick={toggle}>Annuler</Button>\n                        <Button color=\"theme-primary\" onClick={removeCharacter}>Supprimer</Button>\n                    </ModalFooter>\n                </ModalWrapper>\n            </Modal>\n        </div>\n    );\n}\n\nexport default withRouter(CharacterDeleteModal);\n\nconst ModalWrapper = styled.div`\n.modal-delete-content {\n    display: flex;\n    align-items: center;\n    padding: 0 5%;\n    img {\n        max-width: 125px;\n        margin-right: 30px;   \n    }\n}\n\n`","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components/macro'\nimport BaseScreen from './BaseScreen'\nimport { withRouter, useParams, Link } from 'react-router-dom'\nimport { Row, Col } from 'reactstrap';\nimport CharacterEditModal from '../components/modals/CharacterEditModal';\nimport { FiArrowLeftCircle } from \"react-icons/fi\";\nimport singleCharacterBg from '../assets/images/character-single-bg.svg'\nimport CharacterDeleteModal from '../components/modals/CharacterDeleteModal';\n\nconst CharacterSingleScreen = () => {\n    const [donneesRecues, setDonneesRecues] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const characterId = useParams().id;\n    /* const {id: characterId} = useParams() */\n\n    async function getCharacterInfos() {\n        setIsLoading(true)\n        try {\n            let url = 'http://localhost:3001/characters/'\n            const response = await fetch(url + characterId);\n            const reponseDeApi = await response.json();\n            setDonneesRecues(reponseDeApi);\n            setIsLoading(false)\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n        } catch (error) {\n            console.log(error);\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        getCharacterInfos();\n        return () => { }\n    }, [characterId]);\n\n    console.log({ donneesRecues });\n\n    return (\n        <BaseScreen>\n            <Wrapper className=\"character-single-wrapper\">\n                {!isLoading && <div>\n                    <Row>\n                        <Col md=\"6\">\n                            <div className=\"character-single-image-wrapper\">\n                                <div className=\"image-ratio-1\">\n                                    <div className=\"img-wrapper\" style={{ backgroundImage: `url(${donneesRecues.image})` }}></div>\n                                </div>\n                            </div>\n                        </Col>\n                        <Col md=\"6\" className=\"d-flex align-items-center\">\n                            <div className=\"character-single-info-wrapper\">\n                                <h2>{donneesRecues.name}</h2>\n                                <span className=\"character-page-field-title\">Statut</span>\n                                <p>{donneesRecues.status}</p>\n                                <span className=\"character-page-field-title\">Genre</span>\n                                <p>{donneesRecues.gender}</p>\n                                <span className=\"character-page-field-title\">Espèce</span>\n                                <p>{donneesRecues.species}</p>\n                                <span className=\"character-page-field-title\">Type</span>\n                                <p>{donneesRecues.type ? donneesRecues.type : \"--\"}</p>\n                                <span className=\"character-page-field-title\">Planète d'origine</span>\n                                <p>{donneesRecues.location}</p>\n                                <span className=\"character-page-field-title\">Emplacement</span>\n                                <p>{donneesRecues.origin}</p>\n                            </div>\n                        </Col>\n                    </Row>\n                    <div className=\"button-container\">\n                        <Link to=\"/character\" className=\"btn btn-theme-primary\"><span className=\"icon\"><FiArrowLeftCircle /></span>Retour</Link>\n                        <div className=\"button-container-cta-wrapper\">\n                            <CharacterDeleteModal />\n                            <CharacterEditModal getCharacterInfos={getCharacterInfos} donneesRecues={donneesRecues} />\n                        </div>\n                    </div>\n                </div>\n                }\n            </Wrapper>\n        </BaseScreen>\n    );\n}\n\nexport default withRouter(CharacterSingleScreen);\nconst Wrapper = styled.div`\npadding: 30px;\nborder-radius: 10px;\noverflow: hidden;\nbackground-image: url(${singleCharacterBg});\nbackground-repeat: no-repeat;\nbackground-size: 100%;\nbox-shadow: 4px 4px 10px 0px rgba(0,0,0,0.2);\n\n.character-single-image-wrapper {\n    margin-bottom: 30px;\n    .image-ratio-1 {\n        border-radius: 100%;\n    }\n}\n\n.character-single-infos-wrapper {\n\n}\n\n.character-page-field-title {\n    font-size: 10px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    font-weight: 700;\n}\n\n.button-container {\n    display:flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.button-container-cta-wrapper {\n    display: flex;\n    align-items: center;\n\n    .btn:first-of-type {\n        margin-right: 15px;\n    }\n}\n\n@media (max-width: 767.98px) {\n    .button-container {\n        flex-direction: column-reverse;\n        align-items: flex-start;\n\n        .btn {\n            width: 100%;\n        }\n    }\n\n    .button-container-cta-wrapper {\n        .btn {\n            &:first-of-type {\n                margin-right:0;\n                margin-bottom: 10px;\n            }\n        }\n    }\n}\n\n`","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components/macro'\nimport BaseScreen from './BaseScreen'\nimport { Button, Col } from 'reactstrap';\nimport { IoIosTrash, } from 'react-icons/io';\nimport { FiPlus } from 'react-icons/fi';\nimport CharacterEditModal from '../components/modals/CharacterEditModal';\n\n\nconst defaultEndpoint = 'https://rickandmortyapi.com/api/character/';\n\nconst UserTableScreen = ({ props }) => {\n    const [data, setData] = useState({});\n    useEffect(() => {\n        async function getData() {\n            const res = await fetch(defaultEndpoint);\n            const data = await res.json();\n            setData(data);\n        }\n        getData();\n    }, []);\n\n    const { results = [] } = data;\n\n    console.log(\"data\", data);\n\n    return (\n        <BaseScreen>\n            <Wrapper>\n                <div className=\"page-header\">\n                    <div className=\"page-header-title\">\n                        <h1 className=\"page-title page-title-alt\">Modifier la liste des personnages</h1>\n\n                    </div>\n                    <Button color=\"cta-primary\">\n                        <span className=\"btn-icon-wrap\"><FiPlus /></span>\n                        Ajouter\n                    </Button>\n                </div>\n                <div className=\"row row-cols-2\">\n\n                    {results.map(result => {\n                        const { id, name, image, gender, species, type, origin, status, location } = result;\n\n                        return (\n                            <Col key={id} className=\"user-grid-col\">\n                                <div className=\"user-grid-list\">\n                                    <div className=\"user-grid-list-inner\">\n                                        <div className=\"user-grid-number\">\n                                            <h6>{id}</h6>\n                                        </div>\n                                        <div className=\"user-grid-image\">\n                                            <img src={image} alt=\"character\" className=\"img-fluid\" />\n                                        </div>\n                                        <div className=\"user-grid-info\">\n                                            <div className=\"user-grid-title\">\n                                                <h4 className=\"mb-0\">{name}</h4>\n                                            </div>\n                                            <div className=\"user-grid-details\">\n                                                <span>Genre:</span> {gender}<br />\n                                                <span>Statut:</span> {status}<br />\n                                                <span>Espèce:</span> {species}<br />\n                                                <span>Type: </span> {type}<br />\n                                                <span>Origine:</span>{origin.name}<br />\n                                                <span>Emplacement:</span>{location.name}\n                                            </div>\n                                            <div className=\"user-grid-buttons\">\n                                                <CharacterEditModal />\n                                                <Button color=\"cta-primary\">\n                                                    <span className=\"btn-icon-wrap\"><IoIosTrash /></span>\n                                                    Supprimer\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </Col>\n                        )\n                    })}\n\n                </div>\n\n            </Wrapper>\n        </BaseScreen >\n    );\n}\n\nexport default UserTableScreen;\nconst Wrapper = styled.div`\n\n.user-grid-col {\n    margin-bottom: 30px;\n}\n\n.user-grid-list {\n    position: relative;\n    padding: 1.25rem;\n    border-radius: 10px;\n    background-color: #fff;\n    box-shadow: 4px 4px 10px 0px rgba(0,0,0,0.2);\n}\n\n.user-grid-list-inner{\n    display: flex;\n    /* align-items: center; */\n}\n\n.user-grid-title {\n    margin-bottom: 15px;\n}\n\n.user-grid-number {\n    position: absolute;\n    top: 1.25rem;\n    right: 1.25rem;\n    height: calc(100% - 2.5rem);\n    z-index: 0;\n    display: flex;\n    align-items: center;\n\n    :after {\n        position: absolute;\n        top: 0;\n        right: 50%;\n        width: 1px;\n        height: 100%;\n        content: '';\n        background: #E1E0F2;\n        z-index: 1;\n    }\n\n    h6 {\n        position:relative\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        background: #ffffff;\n        padding: 5px;\n        color: #312651;\n        font-weight: 500;\n        min-width: 20px;\n        min-height: 30px;\n        border-radius: 5px;\n        margin-bottom: 0;\n        z-index: 2;\n        transform: rotate(90deg);\n\n    }\n}\n\n.user-grid-image {\n    margin-right: 15px;\n    img {\n        max-width: 100px;\n        border-radius: 100%;\n    }\n}\n\n.user-grid-info {\n    width: 100%;\n\n}\n\n.user-grid-title {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.user-grid-details {\n    margin-bottom: 30px;\n\n    span {\n        font-size: 10px;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n        margin-bottom: 5px;\n    }\n}\n\n.user-grid-buttons {\n    border-radius: 10px;\n    .btn:first-of-type {\n        margin-right : 10px;\n    }\n}\n\n\n`","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport HomepageScreen from './screens/HomepageScreen'\nimport PageNotFound from './screens/PageNotFound'\nimport CharacterScreen from './screens/CharacterScreen';\nimport CharacterSingleScreen from './screens/CharacterSingleScreen';\nimport UserTableScreen from './screens/UserTableScreen';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <Switch>\n        <Route path=\"/\" exact component={HomepageScreen} />\n        <Route path=\"/character\" exact component={CharacterScreen} />\n        <Route path=\"/character/:id\"><CharacterSingleScreen /></Route>\n        <Route path=\"/user-table\" component={UserTableScreen} />\n        <Route component={PageNotFound} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './global.scss'\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <Router>\n      <App />\n    </Router>\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}